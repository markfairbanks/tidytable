
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "msSPChelpR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('msSPChelpR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("asir")
> ### * asir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asir
> ### Title: Calculate age-standardized incidence rates
> ### Aliases: asir
> 
> ### ** Examples
> 
> #load sample data
> data("us_second_cancer")
> data("standard_population")
> data("population_us")
> 
> #make wide data as this is the required format
> usdata_wide <- us_second_cancer %>%
+                     #only use sample
+                     dplyr::filter(as.numeric(fake_id) < 200000) %>%
+                     msSPChelpR::reshape_wide_tidyr(case_id_var = "fake_id", 
+                     time_id_var = "SEQ_NUM", timevar_max = 2)
Long dataset had too many cases per patient. Wide dataset is limited to  2  cases per id as defined in timevar_max option.
>                     
> #create count variable
> usdata_wide <- usdata_wide %>%
+                     dplyr::mutate(count_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ 1,
+                     TRUE ~ 0))
>  
> #remove cases for which no reference population exists
> usdata_wide <- usdata_wide %>%
+                     dplyr::filter(t_yeardiag.2 %in% c("1990 - 1994", "1995 - 1999", "2000 - 2004",
+                                                        "2005 - 2009", "2010 - 2014"))
>                     
> 
> #now we can run the function
> msSPChelpR::asir(usdata_wide,
+       dattype = "seer",
+       std_pop = "ESP2013",
+       truncate_std_pop = FALSE,
+       futime_src = "refpop",
+       summarize_groups = "none",
+       count_var = "count_spc",
+       refpop_df = population_us,
+       region_var = "registry.1", 
+       age_var = "fc_agegroup.1",
+       sex_var = "sex.1",
+       year_var = "t_yeardiag.2", 
+       site_var = "t_site_icd.2",
+       pyar_var = "population_pyar")
Using person-years at risk [PYAR] from reference population as pyears for calculating incidence rates.
Be careful, in this calculation it is assumed that all included regions have collected data for the full time period: 1990 to 2010
                       If you have included registries with differing times, please check this assumption by looking at groups with 0 incidence and specify option 'inclusion_restrictions' if needed.
The following regions, age groups, years, sexes and ICD codes are considered:  SEER Reg 01 - San Francisco-Oakland SMSA, SEER Reg 02 - Connecticut, SEER Reg 20 - Detroit (Metropolitan), SEER Reg 21 - Hawaii 1995 - 1999, 2000 - 2004, 2005 - 2009, 2010 - 2014, 1990 - 1994 00 - 04, 05 - 09, 10 - 14, 15 - 19, 20 - 24, 25 - 29, 30 - 34, 35 - 39, 40 - 44, 45 - 49, 50 - 54, 55 - 59, 60 - 64, 65 - 69, 70 - 74, 75 - 79, 80 - 84, 85 - 120 Female, Male C18, C34, C44, C50, C54, C64, C80, C14
# A tibble: 320 × 17
   age         region sex   year  t_site  asir observed   pyar abs_ir abs_ir_lci
   <chr>       <chr>  <chr> <chr> <chr>  <dbl>    <dbl>  <dbl>  <dbl>      <dbl>
 1 Age standa… SEER … Fema… 1990… C14        0        0 1.92e7      0          0
 2 Age standa… SEER … Fema… 1990… C18        0        0 1.92e7      0          0
 3 Age standa… SEER … Fema… 1990… C34        0        0 1.92e7      0          0
 4 Age standa… SEER … Fema… 1990… C44        0        0 1.92e7      0          0
 5 Age standa… SEER … Fema… 1990… C50        0        0 1.92e7      0          0
 6 Age standa… SEER … Fema… 1990… C54        0        0 1.92e7      0          0
 7 Age standa… SEER … Fema… 1990… C64        0        0 1.92e7      0          0
 8 Age standa… SEER … Fema… 1990… C80        0        0 1.92e7      0          0
 9 Age standa… SEER … Fema… 1995… C14        0        0 2.01e7      0          0
10 Age standa… SEER … Fema… 1995… C18        0        0 2.01e7      0          0
# ℹ 310 more rows
# ℹ 7 more variables: abs_ir_uci <dbl>, asir_copy <dbl>, asir_lci <dbl>,
#   asir_lci_gam <dbl>, asir_uci <dbl>, asir_uci_gam <dbl>, asir_e6 <dbl>
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("calc_futime")
> ### * calc_futime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_futime
> ### Title: Calculate follow-up time per case until end of follow-up
> ###   depending on pat_status - tidyverse version
> ### Aliases: calc_futime
> 
> ### ** Examples
> 
> #load sample data
> data("us_second_cancer")
> 
> #prep step - make wide data as this is the required format
> usdata_wide <- us_second_cancer %>%
+                     msSPChelpR::reshape_wide_tidyr(case_id_var = "fake_id", 
+                     time_id_var = "SEQ_NUM", timevar_max = 10)
>                     
> #prep step - calculate p_spc variable
> usdata_wide <- usdata_wide %>%
+                  dplyr::mutate(p_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ "No SPC",
+                                                        !is.na(t_site_icd.2)   ~ "SPC developed",
+                                                        TRUE ~ NA_character_)) %>%
+                  dplyr::mutate(count_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ 1,
+                                                               TRUE ~ 0))
>                                                               
> #prep step - create patient status variable
> usdata_wide <- usdata_wide %>%
+                   msSPChelpR::pat_status(., fu_end = "2017-12-31", dattype = "seer",
+                                          status_var = "p_status", life_var = "p_alive.1",
+                                          birthdat_var = "datebirth.1", lifedat_var = "datedeath.1")
# A tibble: 11 × 3
   p_alive.1 p_status     n
   <chr>        <dbl> <int>
 1 Alive            1 15884
 2 Alive            2 17609
 3 Alive           97    19
 4 Alive           98  2488
 5 Dead             1  2544
 6 Dead             2  2147
 7 Dead             3 18358
 8 Dead             4  8822
 9 Dead            97     2
10 Dead            98   182
11 Dead            NA     5
# A tibble: 7 × 2
  p_status     n
     <dbl> <int>
1        1 18428
2        2 19756
3        3 18358
4        4  8822
5       97    21
6       98  2670
7       NA     5
>  
> #now we can run the function
> msSPChelpR::calc_futime(usdata_wide, 
+                         futime_var_new = "p_futimeyrs", 
+                         fu_end = "2017-12-31",
+                         dattype = "seer", 
+                         time_unit = "years",
+                         status_var = "p_status",
+                         lifedat_var = "datedeath.1", 
+                         fcdat_var = "t_datediag.1", 
+                         spcdat_var = "t_datediag.2")
Warning: There were 6 warnings in `dplyr::summarise()`.
The first warning was:
ℹ In argument: `min_futime = min(.data[["p_futimeyrs"]], na.rm = TRUE)`.
ℹ In group 5: `p_status = 97`.
Caused by warning in `min()`:
! no non-missing arguments to min; returning Inf
ℹ Run `dplyr::last_dplyr_warnings()` to see the 5 remaining warnings.
# A tibble: 7 × 5
  p_status mean_futime min_futime max_futime median_futime
     <dbl>       <dbl>      <dbl>      <dbl>         <dbl>
1        1        9.23     0.0438       27.0          8.04
2        2        8.94     0            26.9          7.83
3        3        8.60     0            25.8          7.55
4        4        6.46     0            26.5          5.25
5       97      NaN      Inf          -Inf           NA   
6       98      NaN      Inf          -Inf           NA   
7       NA      NaN      Inf          -Inf           NA   
# A tibble: 68,060 × 122
   fake_id registry.1 sex.1 race.1 datebirth.1 t_datediag.1 t_site_icd.1 t_dco.1
   <chr>   <chr>      <chr> <chr>  <date>      <date>       <chr>        <chr>  
 1 100004  SEER Reg … Male  White  1926-01-01  1992-07-15   C50          histol…
 2 100034  SEER Reg … Male  White  1979-01-01  2000-06-15   C50          histol…
 3 100037  SEER Reg … Fema… White  1938-01-01  1996-01-15   C54          histol…
 4 100038  SEER Reg … Male  White  1989-01-01  1991-04-15   C50          histol…
 5 100039  SEER Reg … Fema… White  1946-01-01  2003-08-15   C50          histol…
 6 100047  SEER Reg … Fema… White  1927-01-01  1998-04-15   C50          histol…
 7 100057  SEER Reg … Male  Black  1961-01-01  2010-04-15   C18          histol…
 8 100060  SEER Reg … Fema… White  1947-01-01  2003-08-15   C50          histol…
 9 100063  SEER Reg … Fema… Black  1938-01-01  1995-12-15   C50          histol…
10 100073  SEER Reg … Male  White  1960-01-01  1993-11-15   C44          histol…
# ℹ 68,050 more rows
# ℹ 114 more variables: fc_age.1 <int>, datedeath.1 <date>, p_alive.1 <chr>,
#   p_dodmin.1 <date>, fc_agegroup.1 <chr>, t_yeardiag.1 <chr>,
#   registry.2 <chr>, sex.2 <chr>, race.2 <chr>, datebirth.2 <date>,
#   t_datediag.2 <date>, t_site_icd.2 <chr>, t_dco.2 <chr>, fc_age.2 <int>,
#   datedeath.2 <date>, p_alive.2 <chr>, p_dodmin.2 <date>,
#   fc_agegroup.2 <chr>, t_yeardiag.2 <chr>, registry.3 <chr>, sex.3 <chr>, …
> 
> 
> 
> 
> cleanEx()
> nameEx("calc_futime_tt")
> ### * calc_futime_tt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_futime_tt
> ### Title: Calculate follow-up time per case until end of follow-up
> ###   depending on pat_status - tidytable version
> ### Aliases: calc_futime_tt
> 
> ### ** Examples
> 
> #load sample data
> data("us_second_cancer")
> 
> #make wide data as this is the required format
> usdata_wide <- us_second_cancer %>%
+                     msSPChelpR::reshape_wide_tidyr(case_id_var = "fake_id", 
+                     time_id_var = "SEQ_NUM", timevar_max = 10)
>                     
> #prep step - calculate p_spc variable
> usdata_wide <- usdata_wide %>%
+                  dplyr::mutate(p_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ "No SPC",
+                                                        !is.na(t_site_icd.2)   ~ "SPC developed",
+                                                        TRUE ~ NA_character_)) %>%
+                  dplyr::mutate(count_spc = dplyr::case_when(is.na(t_site_icd.2)   ~ 1,
+                                                               TRUE ~ 0))
>                                                               
> #prep step - create patient status variable
> usdata_wide <- usdata_wide %>%
+                   msSPChelpR::pat_status(., fu_end = "2017-12-31", dattype = "seer",
+                                          status_var = "p_status", life_var = "p_alive.1",
+                                          birthdat_var = "datebirth.1", lifedat_var = "datedeath.1")
# A tibble: 11 × 3
   p_alive.1 p_status     n
   <chr>        <dbl> <int>
 1 Alive            1 15884
 2 Alive            2 17609
 3 Alive           97    19
 4 Alive           98  2488
 5 Dead             1  2544
 6 Dead             2  2147
 7 Dead             3 18358
 8 Dead             4  8822
 9 Dead            97     2
10 Dead            98   182
11 Dead            NA     5
# A tibble: 7 × 2
  p_status     n
     <dbl> <int>
1        1 18428
2        2 19756
3        3 18358
4        4  8822
5       97    21
6       98  2670
7       NA     5
>  
> #now we can run the function
> msSPChelpR::calc_futime_tt(usdata_wide, 
+                         futime_var_new = "p_futimeyrs", 
+                         fu_end = "2017-12-31",
+                         dattype = "seer", 
+                         time_unit = "years",
+                         status_var = "p_status",
+                         lifedat_var = "datedeath.1", 
+                         fcdat_var = "t_datediag.1", 
+                         spcdat_var = "t_datediag.2")
Error: 'mutate.' is not an exported object from 'namespace:tidytable'
Execution halted
